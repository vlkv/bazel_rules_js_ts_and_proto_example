load("@aspect_rules_js//js:defs.bzl", "js_library")
load("@aspect_rules_ts//ts:defs.bzl", "ts_config")
load("@bazel_env.bzl", "bazel_env")
load("@buildifier_prebuilt//:rules.bzl", "buildifier")
load("@gazelle//:def.bzl", "gazelle")
load("@npm//:defs.bzl", "npm_link_all_packages")
load("@rules_python//python:pip.bzl", "compile_pip_requirements")

npm_link_all_packages(name = "node_modules")

ts_config(
    name = "tsconfig",
    src = "tsconfig.json",
    visibility = ["//visibility:public"],
    deps = [
        "//:node_modules/@tsconfig/node16-strictest",  #keep
    ],
)

js_library(
    name = "pkg",
    srcs = ["package.json"],
    visibility = ["//visibility:public"],
)

# Read more: https://rules-python.readthedocs.io/en/latest/pypi/lock.html
# Use `bazel run //:requirements.update` to update requirements_lock.txt file
# Use `bazel run //:requirements.test` to test that it is up to date
compile_pip_requirements(
    name = "requirements",
    src = "pyproject.toml",
    requirements_txt = "requirements_lock.txt",
)

gazelle(name = "gazelle")

# To run buildifier directly use this:
# bazel run -- @buildifier_prebuilt//:buildifier --version
# BUT: It is much better to use bazel_env instead. See //:bazel_env
buildifier(
    name = "buildifier",
    exclude_patterns = [
        "./.git/*",
    ],
    lint_mode = "warn",
    mode = "diff",
)

# Run this target: `./bazelisk run //:bazel_env` to setup bazel_env, follow its instructions
bazel_env(
    name = "bazel_env",
    tools = {
        "buildifier": "@buildifier_prebuilt//:buildifier",
        "go": "@rules_go//go",
    },
)
