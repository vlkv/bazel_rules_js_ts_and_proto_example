module(name = "monorepo")

bazel_dep(name = "aspect_bazel_lib", version = "2.20.0")
bazel_dep(name = "aspect_rules_js", version = "2.3.7")

####### Node.js version #########
# By default you get the node version from DEFAULT_NODE_VERSION in @rules_nodejs//nodejs:repositories.bzl
# Optionally you can pin a different node version:
bazel_dep(name = "rules_nodejs", version = "6.3.0")

node = use_extension("@rules_nodejs//nodejs:extensions.bzl", "node", dev_dependency = True)
node.toolchain(node_version = "20.12.2")

npm = use_extension("@aspect_rules_js//npm:extensions.bzl", "npm", dev_dependency = True)
npm.npm_translate_lock(
    name = "npm",
    data = [
        "//:package.json",
        "//:pnpm-workspace.yaml",
        "//backend/jsapp:package.json",
        "//backend/jslib:package.json",
        "//backend/proto/gen/ts:package.json",
        "//backend/tsapp:package.json",
    ],
    npm_package_target_name = "pkg",
    pnpm_lock = "//:pnpm-lock.yaml",
    update_pnpm_lock = True,
)
use_repo(npm, "npm")

pnpm = use_extension("@aspect_rules_js//npm:extensions.bzl", "pnpm")

# Allows developers to use the matching pnpm version, for example:
# bazel run -- @pnpm --dir /home/runner/work/rules_js/rules_js install
use_repo(pnpm, "pnpm")  # 8.6.7

bazel_dep(name = "aspect_rules_jest", version = "0.23.2")
bazel_dep(name = "aspect_rules_ts", version = "3.6.0")
bazel_dep(name = "bazel_skylib", version = "1.8.1")

rules_ts_ext = use_extension("@aspect_rules_ts//ts:extensions.bzl", "ext", dev_dependency = True)
rules_ts_ext.deps(
    ts_version_from = "//:package.json",
)
use_repo(rules_ts_ext, "npm_typescript")

bazel_dep(name = "protobuf", version = "31.1")
bazel_dep(name = "grpc", version = "1.73.1")
bazel_dep(name = "rules_proto", version = "7.1.0")
bazel_dep(name = "rules_proto_grpc", version = "5.5.0")
bazel_dep(name = "toolchains_protoc", version = "0.4.3")

# Prevent version skew by matching protoc version to protobuf version, as C++ is the only lang that
# has no cross-version runtime guarantee:
# https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp
protoc = use_extension("@toolchains_protoc//protoc:extensions.bzl", "protoc")
protoc.toolchain(
    google_protobuf = "com_google_protobuf",
    version = "v27.1",
)

bazel_dep(name = "googleapis", version = "0.0.0-20241220-5e258e33.bcr.1")
bazel_dep(name = "rules_python", version = "1.5.1")

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
    hub_name = "pypi",
    python_version = "3.11",
    requirements_lock = "//:requirements_lock.txt",
)
use_repo(pip, "pypi")

bazel_dep(name = "rules_proto_grpc_python", version = "5.5.0")
bazel_dep(name = "rules_go", version = "0.56.1")
bazel_dep(name = "gazelle", version = "0.45.0")

go_sdk = use_extension("@rules_go//go:extensions.bzl", "go_sdk")
go_sdk.download(version = "1.24.1")

go_deps = use_extension("@gazelle//:extensions.bzl", "go_deps")
go_deps.from_file(go_mod = "//:go.mod")
use_repo(
    go_deps,
    "com_github_google_uuid",
    "com_github_shopspring_decimal",
)

bazel_dep(name = "rules_cc", version = "0.2.8")

# Read more about it https://blog.aspect.build/hermetic-c-toolchain
bazel_dep(name = "gcc_toolchain", version = "0.9.0")
gcc_toolchains = use_extension("@gcc_toolchain//toolchain:module_extensions.bzl", "gcc_toolchains", dev_dependency = True)
gcc_toolchains.toolchain(
    name = "gcc_toolchain_x86_64",
    target_arch = "x86_64",
    gcc_version = "15.2.0",
    extra_ldflags = [
        "-lstdc++",  # Need this flag for C++ stdlib https://github.com/f0rmiga/gcc-toolchain/tree/main/docs#c
        "-l:libstdc++.a",  # This is for static linking https://github.com/f0rmiga/gcc-toolchain/tree/main/docs#linking-c-standard-library
    ],
)
use_repo(gcc_toolchains, "gcc_toolchain_x86_64")
register_toolchains(
    "@gcc_toolchain_x86_64//:cc_toolchain",
    dev_dependency = True,
)


# Next, follow the install instructions for
# - linting: https://github.com/aspect-build/rules_lint/blob/v1.7.0/docs/linting.md
# - formatting: https://github.com/aspect-build/rules_lint/blob/v1.7.0/docs/formatting.md
bazel_dep(name = "aspect_rules_lint", version = "1.7.0")
bazel_dep(name = "rules_buf", version = "0.5.2")

buf = use_extension("@rules_buf//buf:extensions.bzl", "buf")
buf.toolchains(version = "v1.57.2")  # see https://github.com/bufbuild/buf/releases
use_repo(buf, "rules_buf_toolchains")

bazel_dep(name = "toolchains_llvm", version = "1.5.0")
llvm = use_extension("@toolchains_llvm//toolchain/extensions:llvm.bzl", "llvm")
llvm.toolchain(
    llvm_versions = {
        "": "20.1.8",
        # "darwin-x86_64": "15.0.7",
    },
)
use_repo(llvm, "llvm_toolchain", "llvm_toolchain_llvm")
# register_toolchains("@llvm_toolchain//:all")
